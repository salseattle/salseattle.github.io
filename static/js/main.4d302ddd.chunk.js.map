{"version":3,"sources":["context.ts","services/environment.ts","components/App.tsx","index.tsx"],"names":["environmentService","window","NODE_ENV","createAppContainer","services","environment","AppContext","createContext","App","mode","useContext","isProduction","ReactDOM","render","Provider","value","document","getElementById"],"mappings":"uLAaMA,EAAqB,ICZ3B,uGAII,MAAoC,eAA5BC,OAAeC,aAJ3B,MDeaC,EAAqB,WAChC,MAAO,CACLC,SAAU,CACRC,YAAa,kBAAML,MAMZM,EAAaC,wBAA4BJ,KERvCK,EAXH,WAAO,IAEXC,GAAOJ,EFqBNK,qBAAWJ,GEtBXF,SAAWC,eACSM,eAAiB,aAAe,cAC3D,OACE,6BACE,mDACA,2DAAiCF,EAAjC,YCPNG,IAASC,OACP,kBAACP,EAAWQ,SAAZ,CAAqBC,MAAOZ,KAC1B,kBAAC,EAAD,OAEFa,SAASC,eAAe,U","file":"static/js/main.4d302ddd.chunk.js","sourcesContent":["import {createContext, useContext} from 'react';\nimport {EnvironmentService} from './services/environment';\n\n/**\n * Container for all of the injected dependency of the components.\n */\nexport interface AppContainer {\n  services: {\n    environment(): EnvironmentService;\n  }\n}\n\n// Initialize singleton dependencies.\nconst environmentService = new EnvironmentService();\n\n/** Creates a new container to be provided in context. */\nexport const createAppContainer = (): AppContainer => {\n  return {\n    services: {\n      environment: () => environmentService,\n    },\n  };\n}\n\n/** Global context to be provided by the root of the app. */\nexport const AppContext = createContext<AppContainer>(createAppContainer());\n\n/** React hook get the container from the provided AppContext. */\nexport const useAppContext = () => {\n  return useContext(AppContext);\n};","/** For accessing environment variables. */\nexport class EnvironmentService {\n  /** Whether the app is running is production mode. */\n  isProduction() {\n    // This value is set on window in the template, determined at build time.\n    return (window as any).NODE_ENV === 'production';\n  }\n}","import './App.css';\n\nimport React from 'react';\nimport {useAppContext} from '../context';\n\n/** Root component of the web app. */\nconst App = () => {\n  const {services: {environment}} = useAppContext();\n  const mode = environment().isProduction() ? 'production' : 'development';\n  return (\n    <div>\n      <div>Hello SAL Seattle!</div>\n      <p>You are currently viewing in {mode} mode.</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {AppContext, createAppContainer} from './context';\n\nReactDOM.render(\n  <AppContext.Provider value={createAppContainer()}>\n    <App />\n  </AppContext.Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}